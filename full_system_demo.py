"""
Full System Demo - Demonstrates the complete multi-agent workflow
"""

import asyncio
import sys
import os
import json


from src.agents import (
    QueryUnderstandingAgent,
    GenerateReportAgent,
    Orchestrator
)
from src.agents.core.work_order import WorkOrder

async def run_full_system_demo():
    """
    Demonstrates the full workflow:
    1. User query comes in.
    2. QueryUnderstandingAgent analyzes it and creates a Work Order.
    3. Orchestrator receives the Work Order and manages the workflow.
    4. Orchestrator delegates tasks to analysis agents.
    5. GenerateReportAgent creates the final report.
    """
    
    print("üöÄ Starting Full Multi-Agent System Demo")
    print("=" * 60)
    
    # 1. Initialize Agents
    query_understanding_agent = QueryUnderstandingAgent("query_agent_001")
    generate_report_agent = GenerateReportAgent("generate_report_agent_001")

    # Create a dictionary of all agents for the orchestrator
    agents = {
        "QueryUnderstandingAgent": query_understanding_agent,
        "GenerateReportAgent": generate_report_agent
    }
    
    # 2. Initialize Orchestrator
    orchestrator = Orchestrator(agents)
    
    print("‚úÖ Agents and Orchestrator Initialized")
    print()

    # 3. Simulate User Query
    user_query = "I am an investor. I want to know if buying a 120sqm apartment in Tehran's District 2 is a good investment right now. What are the market trends and what is your strategic advice?"
    
    print(f"üë§ User Query: {user_query}\n")
    
    # 4. QueryUnderstandingAgent Analyzes Query
    print("1Ô∏è‚É£ QueryUnderstandingAgent is analyzing the user query...")
    # In a real system, the orchestrator might call this, but we'll do it directly for the demo
    analysis = await query_understanding_agent.analyze_user_query(user_query)
    work_order = query_understanding_agent.create_work_order(analysis, user_query)
    
    print("   - Work Order Created:", work_order.order_id)
    print("   - Client Type:", work_order.client_type.value)
    print("   - Primary Task:", work_order.primary_task.value)
    print()
    
    # 5. Orchestrator Executes Workflow
    print("2Ô∏è‚É£ Orchestrator is executing the workflow...")
    final_results = await orchestrator.execute_workflow(work_order)
    print("   - Orchestration complete!")
    print()
    
    # 6. Display Final Report
    print("3Ô∏è‚É£ Final Report:")
    print("-" * 50)
    
    # Pretty print the final report
    print(json.dumps(final_results, indent=2))
    print("-" * 50)
            
    print("\n‚úÖ Demo Finished!")
    print("This demonstrates the full loop from user query to a final report generated by the new agent architecture.")
    #well save the results to a file
    with open("final_results.json", "w") as f:
        json.dump(final_results, f, indent=2)

if __name__ == "__main__":
    # To address a known issue in Windows with asyncio, use a different policy
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
    asyncio.run(run_full_system_demo()) 